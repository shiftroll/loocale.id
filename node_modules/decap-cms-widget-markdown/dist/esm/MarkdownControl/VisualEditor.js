"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.mergeMediaConfig = mergeMediaConfig;
var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));
var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _core = require("@emotion/core");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _slate = require("slate");
var _slateReact = require("slate-react");
var _slateHistory = require("slate-history");
var _immutable = require("immutable");
var _styles = require("../styles");
var _Toolbar = _interopRequireDefault(require("./Toolbar"));
var _renderers = require("./renderers");
var _withLists = _interopRequireDefault(require("./plugins/lists/withLists"));
var _withBlocks = _interopRequireDefault(require("./plugins/blocks/withBlocks"));
var _withInlines = _interopRequireDefault(require("./plugins/inlines/withInlines"));
var _toggleMark = _interopRequireDefault(require("./plugins/inlines/events/toggleMark"));
var _toggleLink = _interopRequireDefault(require("./plugins/inlines/events/toggleLink"));
var _getActiveLink = _interopRequireDefault(require("./plugins/inlines/selectors/getActiveLink"));
var _isMarkActive = _interopRequireDefault(require("./plugins/inlines/locations/isMarkActive"));
var _isCursorInBlockType = _interopRequireDefault(require("./plugins/blocks/locations/isCursorInBlockType"));
var _serializers = require("../serializers");
var _withShortcodes = _interopRequireDefault(require("./plugins/shortcodes/withShortcodes"));
var _insertShortcode = _interopRequireDefault(require("./plugins/shortcodes/insertShortcode"));
var _defaultEmptyBlock = _interopRequireDefault(require("./plugins/blocks/defaultEmptyBlock"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } // @refresh reset
function visualEditorStyles({
  minimal
}) {
  return `
  position: relative;
  overflow: auto;
  font-family: ${_decapCmsUiDefault.fonts.primary};
  min-height: ${minimal ? 'auto' : _decapCmsUiDefault.lengths.richTextEditorMinHeight};
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-top: 0;
  margin-top: -${_styles.editorStyleVars.stickyDistanceBottom};
  padding: 0;
  display: flex;
  flex-direction: column;
  z-index: ${_decapCmsUiDefault.zIndex.zIndex100};
`;
}
const InsertionPoint = (0, _styledBase.default)("div", {
  target: "ebiot7z0",
  label: "InsertionPoint"
})(process.env.NODE_ENV === "production" ? {
  name: "b2d31m",
  styles: "flex:1 1 auto;cursor:text;"
} : {
  name: "b2d31m",
  styles: "flex:1 1 auto;cursor:text;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVmlzdWFsRWRpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThDaUMiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9WaXN1YWxFZGl0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAcmVmcmVzaCByZXNldFxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBDbGFzc05hbWVzLCBjc3MgYXMgY29yZUNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgbGVuZ3RocywgZm9udHMsIHpJbmRleCB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNyZWF0ZUVkaXRvciwgVHJhbnNmb3JtcywgRWRpdG9yIGFzIFNsYXRlRWRpdG9yIH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgRWRpdGFibGUsIFJlYWN0RWRpdG9yLCBTbGF0ZSwgd2l0aFJlYWN0IH0gZnJvbSAnc2xhdGUtcmVhY3QnO1xuaW1wb3J0IHsgd2l0aEhpc3RvcnkgfSBmcm9tICdzbGF0ZS1oaXN0b3J5JztcbmltcG9ydCB7IGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgZWRpdG9yU3R5bGVWYXJzLCBFZGl0b3JDb250cm9sQmFyIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCBUb29sYmFyIGZyb20gJy4vVG9vbGJhcic7XG5pbXBvcnQgeyBFbGVtZW50LCBMZWFmIH0gZnJvbSAnLi9yZW5kZXJlcnMnO1xuaW1wb3J0IHdpdGhMaXN0cyBmcm9tICcuL3BsdWdpbnMvbGlzdHMvd2l0aExpc3RzJztcbmltcG9ydCB3aXRoQmxvY2tzIGZyb20gJy4vcGx1Z2lucy9ibG9ja3Mvd2l0aEJsb2Nrcyc7XG5pbXBvcnQgd2l0aElubGluZXMgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvd2l0aElubGluZXMnO1xuaW1wb3J0IHRvZ2dsZU1hcmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvZXZlbnRzL3RvZ2dsZU1hcmsnO1xuaW1wb3J0IHRvZ2dsZUxpbmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvZXZlbnRzL3RvZ2dsZUxpbmsnO1xuaW1wb3J0IGdldEFjdGl2ZUxpbmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvc2VsZWN0b3JzL2dldEFjdGl2ZUxpbmsnO1xuaW1wb3J0IGlzTWFya0FjdGl2ZSBmcm9tICcuL3BsdWdpbnMvaW5saW5lcy9sb2NhdGlvbnMvaXNNYXJrQWN0aXZlJztcbmltcG9ydCBpc0N1cnNvckluQmxvY2tUeXBlIGZyb20gJy4vcGx1Z2lucy9ibG9ja3MvbG9jYXRpb25zL2lzQ3Vyc29ySW5CbG9ja1R5cGUnO1xuaW1wb3J0IHsgbWFya2Rvd25Ub1NsYXRlLCBzbGF0ZVRvTWFya2Rvd24gfSBmcm9tICcuLi9zZXJpYWxpemVycyc7XG5pbXBvcnQgd2l0aFNob3J0Y29kZXMgZnJvbSAnLi9wbHVnaW5zL3Nob3J0Y29kZXMvd2l0aFNob3J0Y29kZXMnO1xuaW1wb3J0IGluc2VydFNob3J0Y29kZSBmcm9tICcuL3BsdWdpbnMvc2hvcnRjb2Rlcy9pbnNlcnRTaG9ydGNvZGUnO1xuaW1wb3J0IGRlZmF1bHRFbXB0eUJsb2NrIGZyb20gJy4vcGx1Z2lucy9ibG9ja3MvZGVmYXVsdEVtcHR5QmxvY2snO1xuXG5mdW5jdGlvbiB2aXN1YWxFZGl0b3JTdHlsZXMoeyBtaW5pbWFsIH0pIHtcbiAgcmV0dXJuIGBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogYXV0bztcbiAgZm9udC1mYW1pbHk6ICR7Zm9udHMucHJpbWFyeX07XG4gIG1pbi1oZWlnaHQ6ICR7bWluaW1hbCA/ICdhdXRvJyA6IGxlbmd0aHMucmljaFRleHRFZGl0b3JNaW5IZWlnaHR9O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcbiAgYm9yZGVyLXRvcDogMDtcbiAgbWFyZ2luLXRvcDogLSR7ZWRpdG9yU3R5bGVWYXJzLnN0aWNreURpc3RhbmNlQm90dG9tfTtcbiAgcGFkZGluZzogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgei1pbmRleDogJHt6SW5kZXguekluZGV4MTAwfTtcbmA7XG59XG5cbmNvbnN0IEluc2VydGlvblBvaW50ID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMSAxIGF1dG87XG4gIGN1cnNvcjogdGV4dDtcbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1lZGlhQ29uZmlnKGVkaXRvckNvbXBvbmVudHMsIGZpZWxkKSB7XG4gIC8vIG1lcmdlIGVkaXRvciBtZWRpYSBsaWJyYXJ5IGNvbmZpZyB0byBpbWFnZSBjb21wb25lbnRzXG4gIGlmIChlZGl0b3JDb21wb25lbnRzLmhhcygnaW1hZ2UnKSkge1xuICAgIGNvbnN0IGltYWdlQ29tcG9uZW50ID0gZWRpdG9yQ29tcG9uZW50cy5nZXQoJ2ltYWdlJyk7XG4gICAgY29uc3QgZmllbGRzID0gaW1hZ2VDb21wb25lbnQ/LmZpZWxkcztcblxuICAgIGlmIChmaWVsZHMpIHtcbiAgICAgIGltYWdlQ29tcG9uZW50LmZpZWxkcyA9IGZpZWxkcy51cGRhdGUoXG4gICAgICAgIGZpZWxkcy5maW5kSW5kZXgoZiA9PiBmLmdldCgnd2lkZ2V0JykgPT09ICdpbWFnZScpLFxuICAgICAgICBmID0+IHtcbiAgICAgICAgICAvLyBtZXJnZSBgbWVkaWFfbGlicmFyeWAgY29uZmlnXG4gICAgICAgICAgaWYgKGZpZWxkLmhhcygnbWVkaWFfbGlicmFyeScpKSB7XG4gICAgICAgICAgICBmID0gZi5zZXQoXG4gICAgICAgICAgICAgICdtZWRpYV9saWJyYXJ5JyxcbiAgICAgICAgICAgICAgZmllbGQuZ2V0KCdtZWRpYV9saWJyYXJ5JykubWVyZ2VEZWVwKGYuZ2V0KCdtZWRpYV9saWJyYXJ5JykpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbWVyZ2UgJ21lZGlhX2ZvbGRlcidcbiAgICAgICAgICBpZiAoZmllbGQuaGFzKCdtZWRpYV9mb2xkZXInKSAmJiAhZi5oYXMoJ21lZGlhX2ZvbGRlcicpKSB7XG4gICAgICAgICAgICBmID0gZi5zZXQoJ21lZGlhX2ZvbGRlcicsIGZpZWxkLmdldCgnbWVkaWFfZm9sZGVyJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBtZXJnZSAncHVibGljX2ZvbGRlcidcbiAgICAgICAgICBpZiAoZmllbGQuaGFzKCdwdWJsaWNfZm9sZGVyJykgJiYgIWYuaGFzKCdwdWJsaWNfZm9sZGVyJykpIHtcbiAgICAgICAgICAgIGYgPSBmLnNldCgncHVibGljX2ZvbGRlcicsIGZpZWxkLmdldCgncHVibGljX2ZvbGRlcicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFZGl0b3IocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG9uQWRkQXNzZXQsXG4gICAgZ2V0QXNzZXQsXG4gICAgY2xhc3NOYW1lLFxuICAgIGZpZWxkLFxuICAgIGlzU2hvd01vZGVUb2dnbGUsXG4gICAgdCxcbiAgICBpc0Rpc2FibGVkLFxuICAgIGdldEVkaXRvckNvbXBvbmVudHMsXG4gICAgZ2V0UmVtYXJrUGx1Z2lucyxcbiAgICBvbkNoYW5nZSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGVkaXRvciA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHdpdGhSZWFjdCh3aXRoSGlzdG9yeSh3aXRoU2hvcnRjb2Rlcyh3aXRoQmxvY2tzKHdpdGhMaXN0cyh3aXRoSW5saW5lcyhjcmVhdGVFZGl0b3IoKSkpKSkpKSxcbiAgICBbXSxcbiAgKTtcblxuICBjb25zdCBlbXB0eVZhbHVlID0gW2RlZmF1bHRFbXB0eUJsb2NrKCldO1xuICBsZXQgZWRpdG9yQ29tcG9uZW50cyA9IGdldEVkaXRvckNvbXBvbmVudHMoKTtcbiAgY29uc3QgY29kZUJsb2NrQ29tcG9uZW50ID0gZnJvbUpTKGVkaXRvckNvbXBvbmVudHMuZmluZCgoeyB0eXBlIH0pID0+IHR5cGUgPT09ICdjb2RlLWJsb2NrJykpO1xuXG4gIGVkaXRvckNvbXBvbmVudHMgPVxuICAgIGNvZGVCbG9ja0NvbXBvbmVudCB8fCBlZGl0b3JDb21wb25lbnRzLmhhcygnY29kZS1ibG9jaycpXG4gICAgICA/IGVkaXRvckNvbXBvbmVudHNcbiAgICAgIDogZWRpdG9yQ29tcG9uZW50cy5zZXQoJ2NvZGUtYmxvY2snLCB7IGxhYmVsOiAnQ29kZSBCbG9jaycsIHR5cGU6ICdjb2RlLWJsb2NrJyB9KTtcblxuICBtZXJnZU1lZGlhQ29uZmlnKGVkaXRvckNvbXBvbmVudHMsIGZpZWxkKTtcblxuICBjb25zdCBbZWRpdG9yVmFsdWUsIHNldEVkaXRvclZhbHVlXSA9IHVzZVN0YXRlKFxuICAgIHByb3BzLnZhbHVlXG4gICAgICA/IG1hcmtkb3duVG9TbGF0ZShwcm9wcy52YWx1ZSwge1xuICAgICAgICAgIHZvaWRDb2RlQmxvY2s6ICEhY29kZUJsb2NrQ29tcG9uZW50LFxuICAgICAgICAgIHJlbWFya1BsdWdpbnM6IGdldFJlbWFya1BsdWdpbnMoKSxcbiAgICAgICAgfSlcbiAgICAgIDogZW1wdHlWYWx1ZSxcbiAgKTtcblxuICBjb25zdCByZW5kZXJFbGVtZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgcHJvcHMgPT4gKFxuICAgICAgPEVsZW1lbnQgey4uLnByb3BzfSBjbGFzc05hbWVXcmFwcGVyPXtjbGFzc05hbWV9IGNvZGVCbG9ja0NvbXBvbmVudD17Y29kZUJsb2NrQ29tcG9uZW50fSAvPlxuICAgICksXG4gICAgW10sXG4gICk7XG4gIGNvbnN0IHJlbmRlckxlYWYgPSB1c2VDYWxsYmFjayhwcm9wcyA9PiA8TGVhZiB7Li4ucHJvcHN9IC8+LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMucGVuZGluZ0ZvY3VzKSB7XG4gICAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZU1hcmtDbGljayhmb3JtYXQpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIHRvZ2dsZU1hcmsoZWRpdG9yLCBmb3JtYXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQmxvY2tDbGljayhmb3JtYXQpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIGlmIChmb3JtYXQuZW5kc1dpdGgoJy1saXN0JykpIHtcbiAgICAgIGVkaXRvci50b2dnbGVMaXN0KGZvcm1hdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkaXRvci50b2dnbGVCbG9jayhmb3JtYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpbmtDbGljaygpIHtcbiAgICB0b2dnbGVMaW5rKGVkaXRvciwgdCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ubGlua1Byb21wdCcpKTtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVG9nZ2xlTW9kZSgpIHtcbiAgICBwcm9wcy5vbk1vZGUoJ3JhdycpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW5zZXJ0U2hvcnRjb2RlKHBsdWdpbkNvbmZpZykge1xuICAgIGluc2VydFNob3J0Y29kZShlZGl0b3IsIHBsdWdpbkNvbmZpZyk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGVkaXRvci5rZXlEb3duSGFuZGxlcnMgfHwgW10pIHtcbiAgICAgIGlmIChoYW5kbGVyKGV2ZW50LCBlZGl0b3IpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgUmVhY3RFZGl0b3IuZm9jdXMoZWRpdG9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrQmVsb3dEb2N1bWVudCgpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgeyBwYXRoOiBbMCwgMF0sIG9mZnNldDogMCB9KTtcbiAgICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIFNsYXRlRWRpdG9yLmVuZChlZGl0b3IsIFtdKSk7XG4gIH1cbiAgY29uc3QgW3Rvb2xiYXJLZXksIHNldFRvb2xiYXJLZXldID0gdXNlU3RhdGUoMCk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0VxdWFsKG5ld1ZhbHVlLCBlZGl0b3JWYWx1ZSkpIHtcbiAgICAgIHNldEVkaXRvclZhbHVlKCgpID0+IG5ld1ZhbHVlKTtcbiAgICAgIG9uQ2hhbmdlKFxuICAgICAgICBzbGF0ZVRvTWFya2Rvd24obmV3VmFsdWUsIHtcbiAgICAgICAgICB2b2lkQ29kZUJsb2NrOiAhIWNvZGVCbG9ja0NvbXBvbmVudCxcbiAgICAgICAgICByZW1hcmtQbHVnaW5zOiBnZXRSZW1hcmtQbHVnaW5zKCksXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0VG9vbGJhcktleShwcmV2ID0+IHByZXYgKyAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc01hcmsoZm9ybWF0KSB7XG4gICAgcmV0dXJuIGlzTWFya0FjdGl2ZShlZGl0b3IsIGZvcm1hdCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJbmxpbmUoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PSAnbGluaycpIHtcbiAgICAgIHJldHVybiAhIWdldEFjdGl2ZUxpbmsoZWRpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQmxvY2soZm9ybWF0KSB7XG4gICAgcmV0dXJuIGlzQ3Vyc29ySW5CbG9ja1R5cGUoZWRpdG9yLCBmb3JtYXQpO1xuICB9XG4gIGZ1bmN0aW9uIGhhc1F1b3RlKCkge1xuICAgIHJldHVybiBpc0N1cnNvckluQmxvY2tUeXBlKGVkaXRvciwgJ3F1b3RlJyk7XG4gIH1cbiAgZnVuY3Rpb24gaGFzTGlzdEl0ZW1zKHR5cGUpIHtcbiAgICByZXR1cm4gaXNDdXJzb3JJbkJsb2NrVHlwZShlZGl0b3IsIHR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2NvcmVDc3NgXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPFNsYXRlIGVkaXRvcj17ZWRpdG9yfSB2YWx1ZT17ZWRpdG9yVmFsdWV9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbEJhcj5cbiAgICAgICAgICB7XG4gICAgICAgICAgICA8VG9vbGJhclxuICAgICAgICAgICAgICBrZXk9e3Rvb2xiYXJLZXl9XG4gICAgICAgICAgICAgIG9uTWFya0NsaWNrPXtoYW5kbGVNYXJrQ2xpY2t9XG4gICAgICAgICAgICAgIG9uQmxvY2tDbGljaz17aGFuZGxlQmxvY2tDbGlja31cbiAgICAgICAgICAgICAgb25MaW5rQ2xpY2s9e2hhbmRsZUxpbmtDbGlja31cbiAgICAgICAgICAgICAgb25Ub2dnbGVNb2RlPXtoYW5kbGVUb2dnbGVNb2RlfVxuICAgICAgICAgICAgICBwbHVnaW5zPXtlZGl0b3JDb21wb25lbnRzfVxuICAgICAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlSW5zZXJ0U2hvcnRjb2RlfVxuICAgICAgICAgICAgICBvbkFkZEFzc2V0PXtvbkFkZEFzc2V0fVxuICAgICAgICAgICAgICBnZXRBc3NldD17Z2V0QXNzZXR9XG4gICAgICAgICAgICAgIGJ1dHRvbnM9e2ZpZWxkLmdldCgnYnV0dG9ucycpfVxuICAgICAgICAgICAgICBlZGl0b3JDb21wb25lbnRzPXtmaWVsZC5nZXQoJ2VkaXRvcl9jb21wb25lbnRzJyl9XG4gICAgICAgICAgICAgIGhhc01hcms9e2hhc01hcmt9XG4gICAgICAgICAgICAgIGhhc0lubGluZT17aGFzSW5saW5lfVxuICAgICAgICAgICAgICBoYXNCbG9jaz17aGFzQmxvY2t9XG4gICAgICAgICAgICAgIGhhc1F1b3RlPXtoYXNRdW90ZX1cbiAgICAgICAgICAgICAgaGFzTGlzdEl0ZW1zPXtoYXNMaXN0SXRlbXN9XG4gICAgICAgICAgICAgIGlzU2hvd01vZGVUb2dnbGU9e2lzU2hvd01vZGVUb2dnbGV9XG4gICAgICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvRWRpdG9yQ29udHJvbEJhcj5cbiAgICAgICAge1xuICAgICAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICAgICAgeyh7IGNzcywgY3ggfSkgPT4gKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgJHt2aXN1YWxFZGl0b3JTdHlsZXMoeyBtaW5pbWFsOiBmaWVsZC5nZXQoJ21pbmltYWwnKSB9KX1cbiAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlZGl0b3JWYWx1ZS5sZW5ndGggIT09IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgPEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE2cHggMjBweCAwO1xuICAgICAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbGVtZW50PXtyZW5kZXJFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMZWFmPXtyZW5kZXJMZWFmfVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPEluc2VydGlvblBvaW50IG9uQ2xpY2s9e2hhbmRsZUNsaWNrQmVsb3dEb2N1bWVudH0gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvQ2xhc3NOYW1lcz5cbiAgICAgICAgfVxuICAgICAgPC9TbGF0ZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuRWRpdG9yLnByb3BUeXBlcyA9IHtcbiAgb25BZGRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbk1vZGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmllbGQ6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZ2V0RWRpdG9yQ29tcG9uZW50czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0UmVtYXJrUGx1Z2luczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTaG93TW9kZVRvZ2dsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function mergeMediaConfig(editorComponents, field) {
  // merge editor media library config to image components
  if (editorComponents.has('image')) {
    const imageComponent = editorComponents.get('image');
    const fields = imageComponent === null || imageComponent === void 0 ? void 0 : imageComponent.fields;
    if (fields) {
      imageComponent.fields = fields.update(fields.findIndex(f => f.get('widget') === 'image'), f => {
        // merge `media_library` config
        if (field.has('media_library')) {
          f = f.set('media_library', field.get('media_library').mergeDeep(f.get('media_library')));
        }
        // merge 'media_folder'
        if (field.has('media_folder') && !f.has('media_folder')) {
          f = f.set('media_folder', field.get('media_folder'));
        }
        // merge 'public_folder'
        if (field.has('public_folder') && !f.has('public_folder')) {
          f = f.set('public_folder', field.get('public_folder'));
        }
        return f;
      });
    }
  }
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "t5h4ts-Editor",
  styles: "position:relative;;label:Editor;"
} : {
  name: "t5h4ts-Editor",
  styles: "position:relative;;label:Editor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVmlzdWFsRWRpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdOa0IiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9WaXN1YWxFZGl0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAcmVmcmVzaCByZXNldFxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBDbGFzc05hbWVzLCBjc3MgYXMgY29yZUNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgbGVuZ3RocywgZm9udHMsIHpJbmRleCB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNyZWF0ZUVkaXRvciwgVHJhbnNmb3JtcywgRWRpdG9yIGFzIFNsYXRlRWRpdG9yIH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgRWRpdGFibGUsIFJlYWN0RWRpdG9yLCBTbGF0ZSwgd2l0aFJlYWN0IH0gZnJvbSAnc2xhdGUtcmVhY3QnO1xuaW1wb3J0IHsgd2l0aEhpc3RvcnkgfSBmcm9tICdzbGF0ZS1oaXN0b3J5JztcbmltcG9ydCB7IGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgZWRpdG9yU3R5bGVWYXJzLCBFZGl0b3JDb250cm9sQmFyIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCBUb29sYmFyIGZyb20gJy4vVG9vbGJhcic7XG5pbXBvcnQgeyBFbGVtZW50LCBMZWFmIH0gZnJvbSAnLi9yZW5kZXJlcnMnO1xuaW1wb3J0IHdpdGhMaXN0cyBmcm9tICcuL3BsdWdpbnMvbGlzdHMvd2l0aExpc3RzJztcbmltcG9ydCB3aXRoQmxvY2tzIGZyb20gJy4vcGx1Z2lucy9ibG9ja3Mvd2l0aEJsb2Nrcyc7XG5pbXBvcnQgd2l0aElubGluZXMgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvd2l0aElubGluZXMnO1xuaW1wb3J0IHRvZ2dsZU1hcmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvZXZlbnRzL3RvZ2dsZU1hcmsnO1xuaW1wb3J0IHRvZ2dsZUxpbmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvZXZlbnRzL3RvZ2dsZUxpbmsnO1xuaW1wb3J0IGdldEFjdGl2ZUxpbmsgZnJvbSAnLi9wbHVnaW5zL2lubGluZXMvc2VsZWN0b3JzL2dldEFjdGl2ZUxpbmsnO1xuaW1wb3J0IGlzTWFya0FjdGl2ZSBmcm9tICcuL3BsdWdpbnMvaW5saW5lcy9sb2NhdGlvbnMvaXNNYXJrQWN0aXZlJztcbmltcG9ydCBpc0N1cnNvckluQmxvY2tUeXBlIGZyb20gJy4vcGx1Z2lucy9ibG9ja3MvbG9jYXRpb25zL2lzQ3Vyc29ySW5CbG9ja1R5cGUnO1xuaW1wb3J0IHsgbWFya2Rvd25Ub1NsYXRlLCBzbGF0ZVRvTWFya2Rvd24gfSBmcm9tICcuLi9zZXJpYWxpemVycyc7XG5pbXBvcnQgd2l0aFNob3J0Y29kZXMgZnJvbSAnLi9wbHVnaW5zL3Nob3J0Y29kZXMvd2l0aFNob3J0Y29kZXMnO1xuaW1wb3J0IGluc2VydFNob3J0Y29kZSBmcm9tICcuL3BsdWdpbnMvc2hvcnRjb2Rlcy9pbnNlcnRTaG9ydGNvZGUnO1xuaW1wb3J0IGRlZmF1bHRFbXB0eUJsb2NrIGZyb20gJy4vcGx1Z2lucy9ibG9ja3MvZGVmYXVsdEVtcHR5QmxvY2snO1xuXG5mdW5jdGlvbiB2aXN1YWxFZGl0b3JTdHlsZXMoeyBtaW5pbWFsIH0pIHtcbiAgcmV0dXJuIGBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogYXV0bztcbiAgZm9udC1mYW1pbHk6ICR7Zm9udHMucHJpbWFyeX07XG4gIG1pbi1oZWlnaHQ6ICR7bWluaW1hbCA/ICdhdXRvJyA6IGxlbmd0aHMucmljaFRleHRFZGl0b3JNaW5IZWlnaHR9O1xuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcbiAgYm9yZGVyLXRvcDogMDtcbiAgbWFyZ2luLXRvcDogLSR7ZWRpdG9yU3R5bGVWYXJzLnN0aWNreURpc3RhbmNlQm90dG9tfTtcbiAgcGFkZGluZzogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgei1pbmRleDogJHt6SW5kZXguekluZGV4MTAwfTtcbmA7XG59XG5cbmNvbnN0IEluc2VydGlvblBvaW50ID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMSAxIGF1dG87XG4gIGN1cnNvcjogdGV4dDtcbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1lZGlhQ29uZmlnKGVkaXRvckNvbXBvbmVudHMsIGZpZWxkKSB7XG4gIC8vIG1lcmdlIGVkaXRvciBtZWRpYSBsaWJyYXJ5IGNvbmZpZyB0byBpbWFnZSBjb21wb25lbnRzXG4gIGlmIChlZGl0b3JDb21wb25lbnRzLmhhcygnaW1hZ2UnKSkge1xuICAgIGNvbnN0IGltYWdlQ29tcG9uZW50ID0gZWRpdG9yQ29tcG9uZW50cy5nZXQoJ2ltYWdlJyk7XG4gICAgY29uc3QgZmllbGRzID0gaW1hZ2VDb21wb25lbnQ/LmZpZWxkcztcblxuICAgIGlmIChmaWVsZHMpIHtcbiAgICAgIGltYWdlQ29tcG9uZW50LmZpZWxkcyA9IGZpZWxkcy51cGRhdGUoXG4gICAgICAgIGZpZWxkcy5maW5kSW5kZXgoZiA9PiBmLmdldCgnd2lkZ2V0JykgPT09ICdpbWFnZScpLFxuICAgICAgICBmID0+IHtcbiAgICAgICAgICAvLyBtZXJnZSBgbWVkaWFfbGlicmFyeWAgY29uZmlnXG4gICAgICAgICAgaWYgKGZpZWxkLmhhcygnbWVkaWFfbGlicmFyeScpKSB7XG4gICAgICAgICAgICBmID0gZi5zZXQoXG4gICAgICAgICAgICAgICdtZWRpYV9saWJyYXJ5JyxcbiAgICAgICAgICAgICAgZmllbGQuZ2V0KCdtZWRpYV9saWJyYXJ5JykubWVyZ2VEZWVwKGYuZ2V0KCdtZWRpYV9saWJyYXJ5JykpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbWVyZ2UgJ21lZGlhX2ZvbGRlcidcbiAgICAgICAgICBpZiAoZmllbGQuaGFzKCdtZWRpYV9mb2xkZXInKSAmJiAhZi5oYXMoJ21lZGlhX2ZvbGRlcicpKSB7XG4gICAgICAgICAgICBmID0gZi5zZXQoJ21lZGlhX2ZvbGRlcicsIGZpZWxkLmdldCgnbWVkaWFfZm9sZGVyJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBtZXJnZSAncHVibGljX2ZvbGRlcidcbiAgICAgICAgICBpZiAoZmllbGQuaGFzKCdwdWJsaWNfZm9sZGVyJykgJiYgIWYuaGFzKCdwdWJsaWNfZm9sZGVyJykpIHtcbiAgICAgICAgICAgIGYgPSBmLnNldCgncHVibGljX2ZvbGRlcicsIGZpZWxkLmdldCgncHVibGljX2ZvbGRlcicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFZGl0b3IocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG9uQWRkQXNzZXQsXG4gICAgZ2V0QXNzZXQsXG4gICAgY2xhc3NOYW1lLFxuICAgIGZpZWxkLFxuICAgIGlzU2hvd01vZGVUb2dnbGUsXG4gICAgdCxcbiAgICBpc0Rpc2FibGVkLFxuICAgIGdldEVkaXRvckNvbXBvbmVudHMsXG4gICAgZ2V0UmVtYXJrUGx1Z2lucyxcbiAgICBvbkNoYW5nZSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGVkaXRvciA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHdpdGhSZWFjdCh3aXRoSGlzdG9yeSh3aXRoU2hvcnRjb2Rlcyh3aXRoQmxvY2tzKHdpdGhMaXN0cyh3aXRoSW5saW5lcyhjcmVhdGVFZGl0b3IoKSkpKSkpKSxcbiAgICBbXSxcbiAgKTtcblxuICBjb25zdCBlbXB0eVZhbHVlID0gW2RlZmF1bHRFbXB0eUJsb2NrKCldO1xuICBsZXQgZWRpdG9yQ29tcG9uZW50cyA9IGdldEVkaXRvckNvbXBvbmVudHMoKTtcbiAgY29uc3QgY29kZUJsb2NrQ29tcG9uZW50ID0gZnJvbUpTKGVkaXRvckNvbXBvbmVudHMuZmluZCgoeyB0eXBlIH0pID0+IHR5cGUgPT09ICdjb2RlLWJsb2NrJykpO1xuXG4gIGVkaXRvckNvbXBvbmVudHMgPVxuICAgIGNvZGVCbG9ja0NvbXBvbmVudCB8fCBlZGl0b3JDb21wb25lbnRzLmhhcygnY29kZS1ibG9jaycpXG4gICAgICA/IGVkaXRvckNvbXBvbmVudHNcbiAgICAgIDogZWRpdG9yQ29tcG9uZW50cy5zZXQoJ2NvZGUtYmxvY2snLCB7IGxhYmVsOiAnQ29kZSBCbG9jaycsIHR5cGU6ICdjb2RlLWJsb2NrJyB9KTtcblxuICBtZXJnZU1lZGlhQ29uZmlnKGVkaXRvckNvbXBvbmVudHMsIGZpZWxkKTtcblxuICBjb25zdCBbZWRpdG9yVmFsdWUsIHNldEVkaXRvclZhbHVlXSA9IHVzZVN0YXRlKFxuICAgIHByb3BzLnZhbHVlXG4gICAgICA/IG1hcmtkb3duVG9TbGF0ZShwcm9wcy52YWx1ZSwge1xuICAgICAgICAgIHZvaWRDb2RlQmxvY2s6ICEhY29kZUJsb2NrQ29tcG9uZW50LFxuICAgICAgICAgIHJlbWFya1BsdWdpbnM6IGdldFJlbWFya1BsdWdpbnMoKSxcbiAgICAgICAgfSlcbiAgICAgIDogZW1wdHlWYWx1ZSxcbiAgKTtcblxuICBjb25zdCByZW5kZXJFbGVtZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgcHJvcHMgPT4gKFxuICAgICAgPEVsZW1lbnQgey4uLnByb3BzfSBjbGFzc05hbWVXcmFwcGVyPXtjbGFzc05hbWV9IGNvZGVCbG9ja0NvbXBvbmVudD17Y29kZUJsb2NrQ29tcG9uZW50fSAvPlxuICAgICksXG4gICAgW10sXG4gICk7XG4gIGNvbnN0IHJlbmRlckxlYWYgPSB1c2VDYWxsYmFjayhwcm9wcyA9PiA8TGVhZiB7Li4ucHJvcHN9IC8+LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMucGVuZGluZ0ZvY3VzKSB7XG4gICAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZU1hcmtDbGljayhmb3JtYXQpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIHRvZ2dsZU1hcmsoZWRpdG9yLCBmb3JtYXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQmxvY2tDbGljayhmb3JtYXQpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIGlmIChmb3JtYXQuZW5kc1dpdGgoJy1saXN0JykpIHtcbiAgICAgIGVkaXRvci50b2dnbGVMaXN0KGZvcm1hdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkaXRvci50b2dnbGVCbG9jayhmb3JtYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpbmtDbGljaygpIHtcbiAgICB0b2dnbGVMaW5rKGVkaXRvciwgdCgnZWRpdG9yLmVkaXRvcldpZGdldHMubWFya2Rvd24ubGlua1Byb21wdCcpKTtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVG9nZ2xlTW9kZSgpIHtcbiAgICBwcm9wcy5vbk1vZGUoJ3JhdycpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW5zZXJ0U2hvcnRjb2RlKHBsdWdpbkNvbmZpZykge1xuICAgIGluc2VydFNob3J0Y29kZShlZGl0b3IsIHBsdWdpbkNvbmZpZyk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGVkaXRvci5rZXlEb3duSGFuZGxlcnMgfHwgW10pIHtcbiAgICAgIGlmIChoYW5kbGVyKGV2ZW50LCBlZGl0b3IpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgUmVhY3RFZGl0b3IuZm9jdXMoZWRpdG9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrQmVsb3dEb2N1bWVudCgpIHtcbiAgICBSZWFjdEVkaXRvci5mb2N1cyhlZGl0b3IpO1xuICAgIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgeyBwYXRoOiBbMCwgMF0sIG9mZnNldDogMCB9KTtcbiAgICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIFNsYXRlRWRpdG9yLmVuZChlZGl0b3IsIFtdKSk7XG4gIH1cbiAgY29uc3QgW3Rvb2xiYXJLZXksIHNldFRvb2xiYXJLZXldID0gdXNlU3RhdGUoMCk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0VxdWFsKG5ld1ZhbHVlLCBlZGl0b3JWYWx1ZSkpIHtcbiAgICAgIHNldEVkaXRvclZhbHVlKCgpID0+IG5ld1ZhbHVlKTtcbiAgICAgIG9uQ2hhbmdlKFxuICAgICAgICBzbGF0ZVRvTWFya2Rvd24obmV3VmFsdWUsIHtcbiAgICAgICAgICB2b2lkQ29kZUJsb2NrOiAhIWNvZGVCbG9ja0NvbXBvbmVudCxcbiAgICAgICAgICByZW1hcmtQbHVnaW5zOiBnZXRSZW1hcmtQbHVnaW5zKCksXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0VG9vbGJhcktleShwcmV2ID0+IHByZXYgKyAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc01hcmsoZm9ybWF0KSB7XG4gICAgcmV0dXJuIGlzTWFya0FjdGl2ZShlZGl0b3IsIGZvcm1hdCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJbmxpbmUoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PSAnbGluaycpIHtcbiAgICAgIHJldHVybiAhIWdldEFjdGl2ZUxpbmsoZWRpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQmxvY2soZm9ybWF0KSB7XG4gICAgcmV0dXJuIGlzQ3Vyc29ySW5CbG9ja1R5cGUoZWRpdG9yLCBmb3JtYXQpO1xuICB9XG4gIGZ1bmN0aW9uIGhhc1F1b3RlKCkge1xuICAgIHJldHVybiBpc0N1cnNvckluQmxvY2tUeXBlKGVkaXRvciwgJ3F1b3RlJyk7XG4gIH1cbiAgZnVuY3Rpb24gaGFzTGlzdEl0ZW1zKHR5cGUpIHtcbiAgICByZXR1cm4gaXNDdXJzb3JJbkJsb2NrVHlwZShlZGl0b3IsIHR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2NvcmVDc3NgXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPFNsYXRlIGVkaXRvcj17ZWRpdG9yfSB2YWx1ZT17ZWRpdG9yVmFsdWV9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbEJhcj5cbiAgICAgICAgICB7XG4gICAgICAgICAgICA8VG9vbGJhclxuICAgICAgICAgICAgICBrZXk9e3Rvb2xiYXJLZXl9XG4gICAgICAgICAgICAgIG9uTWFya0NsaWNrPXtoYW5kbGVNYXJrQ2xpY2t9XG4gICAgICAgICAgICAgIG9uQmxvY2tDbGljaz17aGFuZGxlQmxvY2tDbGlja31cbiAgICAgICAgICAgICAgb25MaW5rQ2xpY2s9e2hhbmRsZUxpbmtDbGlja31cbiAgICAgICAgICAgICAgb25Ub2dnbGVNb2RlPXtoYW5kbGVUb2dnbGVNb2RlfVxuICAgICAgICAgICAgICBwbHVnaW5zPXtlZGl0b3JDb21wb25lbnRzfVxuICAgICAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlSW5zZXJ0U2hvcnRjb2RlfVxuICAgICAgICAgICAgICBvbkFkZEFzc2V0PXtvbkFkZEFzc2V0fVxuICAgICAgICAgICAgICBnZXRBc3NldD17Z2V0QXNzZXR9XG4gICAgICAgICAgICAgIGJ1dHRvbnM9e2ZpZWxkLmdldCgnYnV0dG9ucycpfVxuICAgICAgICAgICAgICBlZGl0b3JDb21wb25lbnRzPXtmaWVsZC5nZXQoJ2VkaXRvcl9jb21wb25lbnRzJyl9XG4gICAgICAgICAgICAgIGhhc01hcms9e2hhc01hcmt9XG4gICAgICAgICAgICAgIGhhc0lubGluZT17aGFzSW5saW5lfVxuICAgICAgICAgICAgICBoYXNCbG9jaz17aGFzQmxvY2t9XG4gICAgICAgICAgICAgIGhhc1F1b3RlPXtoYXNRdW90ZX1cbiAgICAgICAgICAgICAgaGFzTGlzdEl0ZW1zPXtoYXNMaXN0SXRlbXN9XG4gICAgICAgICAgICAgIGlzU2hvd01vZGVUb2dnbGU9e2lzU2hvd01vZGVUb2dnbGV9XG4gICAgICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvRWRpdG9yQ29udHJvbEJhcj5cbiAgICAgICAge1xuICAgICAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICAgICAgeyh7IGNzcywgY3ggfSkgPT4gKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgJHt2aXN1YWxFZGl0b3JTdHlsZXMoeyBtaW5pbWFsOiBmaWVsZC5nZXQoJ21pbmltYWwnKSB9KX1cbiAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlZGl0b3JWYWx1ZS5sZW5ndGggIT09IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgPEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzYFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE2cHggMjBweCAwO1xuICAgICAgICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbGVtZW50PXtyZW5kZXJFbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMZWFmPXtyZW5kZXJMZWFmfVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPEluc2VydGlvblBvaW50IG9uQ2xpY2s9e2hhbmRsZUNsaWNrQmVsb3dEb2N1bWVudH0gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvQ2xhc3NOYW1lcz5cbiAgICAgICAgfVxuICAgICAgPC9TbGF0ZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuRWRpdG9yLnByb3BUeXBlcyA9IHtcbiAgb25BZGRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbk1vZGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZmllbGQ6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZ2V0RWRpdG9yQ29tcG9uZW50czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0UmVtYXJrUGx1Z2luczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTaG93TW9kZVRvZ2dsZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvcjtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function Editor(props) {
  const {
    onAddAsset,
    getAsset,
    className,
    field,
    isShowModeToggle,
    t,
    isDisabled,
    getEditorComponents,
    getRemarkPlugins,
    onChange
  } = props;
  const editor = (0, _react.useMemo)(() => (0, _slateReact.withReact)((0, _slateHistory.withHistory)((0, _withShortcodes.default)((0, _withBlocks.default)((0, _withLists.default)((0, _withInlines.default)((0, _slate.createEditor)())))))), []);
  const emptyValue = [(0, _defaultEmptyBlock.default)()];
  let editorComponents = getEditorComponents();
  const codeBlockComponent = (0, _immutable.fromJS)(editorComponents.find(({
    type
  }) => type === 'code-block'));
  editorComponents = codeBlockComponent || editorComponents.has('code-block') ? editorComponents : editorComponents.set('code-block', {
    label: 'Code Block',
    type: 'code-block'
  });
  mergeMediaConfig(editorComponents, field);
  const [editorValue, setEditorValue] = (0, _react.useState)(props.value ? (0, _serializers.markdownToSlate)(props.value, {
    voidCodeBlock: !!codeBlockComponent,
    remarkPlugins: getRemarkPlugins()
  }) : emptyValue);
  const renderElement = (0, _react.useCallback)(props => (0, _core.jsx)(_renderers.Element, _extends({}, props, {
    classNameWrapper: className,
    codeBlockComponent: codeBlockComponent
  })), []);
  const renderLeaf = (0, _react.useCallback)(props => (0, _core.jsx)(_renderers.Leaf, props), []);
  (0, _react.useEffect)(() => {
    if (props.pendingFocus) {
      _slateReact.ReactEditor.focus(editor);
    }
  }, []);
  function handleMarkClick(format) {
    _slateReact.ReactEditor.focus(editor);
    (0, _toggleMark.default)(editor, format);
  }
  function handleBlockClick(format) {
    _slateReact.ReactEditor.focus(editor);
    if (format.endsWith('-list')) {
      editor.toggleList(format);
    } else {
      editor.toggleBlock(format);
    }
  }
  function handleLinkClick() {
    (0, _toggleLink.default)(editor, t('editor.editorWidgets.markdown.linkPrompt'));
    _slateReact.ReactEditor.focus(editor);
  }
  function handleToggleMode() {
    props.onMode('raw');
  }
  function handleInsertShortcode(pluginConfig) {
    (0, _insertShortcode.default)(editor, pluginConfig);
  }
  function handleKeyDown(event) {
    for (const handler of editor.keyDownHandlers || []) {
      if (handler(event, editor) === false) {
        break;
      }
    }
    _slateReact.ReactEditor.focus(editor);
  }
  function handleClickBelowDocument() {
    _slateReact.ReactEditor.focus(editor);
    _slate.Transforms.select(editor, {
      path: [0, 0],
      offset: 0
    });
    _slate.Transforms.select(editor, _slate.Editor.end(editor, []));
  }
  const [toolbarKey, setToolbarKey] = (0, _react.useState)(0);
  function handleChange(newValue) {
    if (!(0, _isEqual2.default)(newValue, editorValue)) {
      setEditorValue(() => newValue);
      onChange((0, _serializers.slateToMarkdown)(newValue, {
        voidCodeBlock: !!codeBlockComponent,
        remarkPlugins: getRemarkPlugins()
      }));
    }
    setToolbarKey(prev => prev + 1);
  }
  function hasMark(format) {
    return (0, _isMarkActive.default)(editor, format);
  }
  function hasInline(format) {
    if (format == 'link') {
      return !!(0, _getActiveLink.default)(editor);
    }
    return false;
  }
  function hasBlock(format) {
    return (0, _isCursorInBlockType.default)(editor, format);
  }
  function hasQuote() {
    return (0, _isCursorInBlockType.default)(editor, 'quote');
  }
  function hasListItems(type) {
    return (0, _isCursorInBlockType.default)(editor, type);
  }
  return (0, _core.jsx)("div", {
    css: _ref
  }, (0, _core.jsx)(_slateReact.Slate, {
    editor: editor,
    value: editorValue,
    onChange: handleChange
  }, (0, _core.jsx)(_styles.EditorControlBar, null, (0, _core.jsx)(_Toolbar.default, {
    key: toolbarKey,
    onMarkClick: handleMarkClick,
    onBlockClick: handleBlockClick,
    onLinkClick: handleLinkClick,
    onToggleMode: handleToggleMode,
    plugins: editorComponents,
    onSubmit: handleInsertShortcode,
    onAddAsset: onAddAsset,
    getAsset: getAsset,
    buttons: field.get('buttons'),
    editorComponents: field.get('editor_components'),
    hasMark: hasMark,
    hasInline: hasInline,
    hasBlock: hasBlock,
    hasQuote: hasQuote,
    hasListItems: hasListItems,
    isShowModeToggle: isShowModeToggle,
    t: t,
    disabled: isDisabled
  })), (0, _core.jsx)(_core.ClassNames, null, ({
    css,
    cx
  }) => (0, _core.jsx)("div", {
    className: cx(className, css`
                    ${visualEditorStyles({
      minimal: field.get('minimal')
    })}
                  `)
  }, editorValue.length !== 0 && (0, _core.jsx)(_slateReact.Editable, {
    className: css`
                      padding: 16px 20px 0;
                    `,
    renderElement: renderElement,
    renderLeaf: renderLeaf,
    onKeyDown: handleKeyDown,
    autoFocus: false
  }), (0, _core.jsx)(InsertionPoint, {
    onClick: handleClickBelowDocument
  })))));
}
Editor.propTypes = {
  onAddAsset: _propTypes.default.func.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onMode: _propTypes.default.func.isRequired,
  className: _propTypes.default.string.isRequired,
  value: _propTypes.default.string,
  field: _reactImmutableProptypes.default.map.isRequired,
  getEditorComponents: _propTypes.default.func.isRequired,
  getRemarkPlugins: _propTypes.default.func.isRequired,
  isShowModeToggle: _propTypes.default.bool.isRequired,
  t: _propTypes.default.func.isRequired
};
var _default = Editor;
exports.default = _default;