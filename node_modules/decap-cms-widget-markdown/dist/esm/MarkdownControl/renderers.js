"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = Element;
exports.Leaf = Leaf;
exports.renderInline__DEPRECATED = renderInline__DEPRECATED;
var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));
var _react = _interopRequireDefault(require("react"));
var _core = require("@emotion/core");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _slateReact = require("slate-react");
var _VoidBlock = _interopRequireDefault(require("./components/VoidBlock"));
var _Shortcode = _interopRequireDefault(require("./components/Shortcode"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /* eslint-disable react/display-name */
const bottomMargin = '16px';
const headerStyles = `
  font-weight: 700;
  line-height: 1;
`;
const StyledH1 = (0, _styledBase.default)("h1", {
  target: "evlbpgx0",
  label: "StyledH1"
})(headerStyles, ";font-size:32px;margin-top:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH2 = (0, _styledBase.default)("h2", {
  target: "evlbpgx1",
  label: "StyledH2"
})(headerStyles, ";font-size:24px;margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH3 = (0, _styledBase.default)("h3", {
  target: "evlbpgx2",
  label: "StyledH3"
})(headerStyles, ";font-size:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH4 = (0, _styledBase.default)("h4", {
  target: "evlbpgx3",
  label: "StyledH4"
})(headerStyles, ";font-size:18px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH5 = (0, _styledBase.default)("h5", {
  target: "evlbpgx4",
  label: "StyledH5"
})(headerStyles, ";font-size:16px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH6 = StyledH5.withComponent('h6', {
  target: "evlbpgx14",
  label: "StyledH6"
});
const StyledP = (0, _styledBase.default)("p", {
  target: "evlbpgx5",
  label: "StyledP"
})("margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledBlockQuote = (0, _styledBase.default)("blockquote", {
  target: "evlbpgx6",
  label: "StyledBlockQuote"
})("padding-left:16px;border-left:3px solid ", _decapCmsUiDefault.colors.background, ";margin-left:0;margin-right:0;margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledCode = (0, _styledBase.default)("code", {
  target: "evlbpgx7",
  label: "StyledCode"
})("background-color:", _decapCmsUiDefault.colors.background, ";border-radius:", _decapCmsUiDefault.lengths.borderRadius, ";padding:0 2px;font-size:85%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledUl = (0, _styledBase.default)("ul", {
  target: "evlbpgx8",
  label: "StyledUl"
})("margin-bottom:", bottomMargin, ";padding-left:30px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledOl = StyledUl.withComponent('ol', {
  target: "evlbpgx15",
  label: "StyledOl"
});
const StyledLi = (0, _styledBase.default)("li", {
  target: "evlbpgx9",
  label: "StyledLi"
})(process.env.NODE_ENV === "production" ? {
  name: "h1nkjc",
  styles: "& > p:first-of-type{margin-top:8px;}& > p:last-of-type{margin-bottom:8px;}"
} : {
  name: "h1nkjc",
  styles: "& > p:first-of-type{margin-top:8px;}& > p:last-of-type{margin-bottom:8px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBFMEIiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbG9ycywgbGVuZ3RocyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IHVzZVNlbGVjdGVkIH0gZnJvbSAnc2xhdGUtcmVhY3QnO1xuXG5pbXBvcnQgVm9pZEJsb2NrIGZyb20gJy4vY29tcG9uZW50cy9Wb2lkQmxvY2snO1xuaW1wb3J0IFNob3J0Y29kZSBmcm9tICcuL2NvbXBvbmVudHMvU2hvcnRjb2RlJztcblxuY29uc3QgYm90dG9tTWFyZ2luID0gJzE2cHgnO1xuXG5jb25zdCBoZWFkZXJTdHlsZXMgPSBgXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuYDtcblxuY29uc3QgU3R5bGVkSDEgPSBzdHlsZWQuaDFgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAzMnB4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDIgPSBzdHlsZWQuaDJgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDMgPSBzdHlsZWQuaDNgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDQgPSBzdHlsZWQuaDRgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINSA9IHN0eWxlZC5oNWBcbiAgJHtoZWFkZXJTdHlsZXN9O1xuICBmb250LXNpemU6IDE2cHg7XG4gIG1hcmdpbi10b3A6IDhweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg2ID0gU3R5bGVkSDUud2l0aENvbXBvbmVudCgnaDYnKTtcblxuY29uc3QgU3R5bGVkUCA9IHN0eWxlZC5wYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG5gO1xuXG5jb25zdCBTdHlsZWRCbG9ja1F1b3RlID0gc3R5bGVkLmJsb2NrcXVvdGVgXG4gIHBhZGRpbmctbGVmdDogMTZweDtcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkQ29kZSA9IHN0eWxlZC5jb2RlYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBhZGRpbmc6IDAgMnB4O1xuICBmb250LXNpemU6IDg1JTtcbmA7XG5cbmNvbnN0IFN0eWxlZFVsID0gc3R5bGVkLnVsYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG4gIHBhZGRpbmctbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZE9sID0gU3R5bGVkVWwud2l0aENvbXBvbmVudCgnb2wnKTtcblxuY29uc3QgU3R5bGVkTGkgPSBzdHlsZWQubGlgXG4gICYgPiBwOmZpcnN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgfVxuXG4gICYgPiBwOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRBID0gc3R5bGVkLmFgXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICBmb250LXNpemU6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBTdHlsZWRIciA9IHN0eWxlZC5ocmBcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRUYWJsZSA9IHN0eWxlZC50YWJsZWBcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbmA7XG5cbmNvbnN0IFN0eWxlZFRkID0gc3R5bGVkLnRkYFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuYDtcblxuLyoqXG4gKiBTbGF0ZSB1c2VzIFJlYWN0IGNvbXBvbmVudHMgdG8gcmVuZGVyIGVhY2ggdHlwZSBvZiBub2RlIHRoYXQgaXQgcmVjZWl2ZXMuXG4gKiBUaGlzIGlzIHRoZSBjbG9zZXN0IHRoaW5nIFNsYXRlIGhhcyB0byBhIHNjaGVtYSBkZWZpbml0aW9uLiBUaGUgdHlwZXMgYXJlIHNldFxuICogYnkgdXMgd2hlbiB3ZSBtYW51YWxseSBkZXNlcmlhbGl6ZSBmcm9tIFJlbWFyaydzIE1EQVNUIHRvIFNsYXRlJ3MgQVNULlxuICovXG5cbi8qKlxuICogTWFyayBDb21wb25lbnRzXG4gKi9cbmZ1bmN0aW9uIEJvbGQocHJvcHMpIHtcbiAgcmV0dXJuIDxzdHJvbmc+e3Byb3BzLmNoaWxkcmVufTwvc3Ryb25nPjtcbn1cblxuZnVuY3Rpb24gSXRhbGljKHByb3BzKSB7XG4gIHJldHVybiA8ZW0+e3Byb3BzLmNoaWxkcmVufTwvZW0+O1xufVxuXG5mdW5jdGlvbiBTdHJpa2V0aHJvdWdoKHByb3BzKSB7XG4gIHJldHVybiA8cz57cHJvcHMuY2hpbGRyZW59PC9zPjtcbn1cblxuZnVuY3Rpb24gQ29kZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZENvZGU+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkQ29kZT47XG59XG5cbi8qKlxuICogTm9kZSBDb21wb25lbnRzXG4gKi9cbmZ1bmN0aW9uIFBhcmFncmFwaChwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZFAgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFA+O1xufVxuXG5mdW5jdGlvbiBMaXN0SXRlbShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZExpIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRMaT47XG59XG5cbmZ1bmN0aW9uIFF1b3RlKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkQmxvY2tRdW90ZSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkQmxvY2tRdW90ZT47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdPbmUocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRIMSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDE+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nVHdvKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgyPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ1RocmVlKHByb3BzKSB7XG4gIHJldHVybiA8U3R5bGVkSDMgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgzPjtcbn1cblxuZnVuY3Rpb24gSGVhZGluZ0ZvdXIocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDQ+O1xufVxuXG5mdW5jdGlvbiBIZWFkaW5nRml2ZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEg1IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRINT47XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmdTaXgocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRINiB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDY+O1xufVxuXG5mdW5jdGlvbiBUYWJsZShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWRUYWJsZT5cbiAgICAgIDx0Ym9keSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdGJvZHk+XG4gICAgPC9TdHlsZWRUYWJsZT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgcmV0dXJuIDx0ciB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdHI+O1xufVxuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRUZCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVGQ+O1xufVxuXG5mdW5jdGlvbiBUaGVtYXRpY0JyZWFrKHByb3BzKSB7XG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSB1c2VTZWxlY3RlZCgpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgey4uLnByb3BzLmF0dHJpYnV0ZXN9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPGRpdiBjb250ZW50RWRpdGFibGU9e2ZhbHNlfT5cbiAgICAgICAgPFN0eWxlZEhyXG4gICAgICAgICAgey4uLnByb3BzLmF0dHJpYnV0ZXN9XG4gICAgICAgICAgY3NzPXtcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB4ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgICAgICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICAgICAgICBgXG4gICAgICAgICAgfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIEJyZWFrKHByb3BzKSB7XG4gIHJldHVybiA8YnIgey4uLnByb3BzLmF0dHJpYnV0ZXN9IC8+O1xufVxuXG5mdW5jdGlvbiBCdWxsZXRlZExpc3QocHJvcHMpIHtcbiAgcmV0dXJuIDxTdHlsZWRVbCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVWw+O1xufVxuXG5mdW5jdGlvbiBOdW1iZXJlZExpc3QocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkT2wgey4uLnByb3BzLmF0dHJpYnV0ZXN9IHN0YXJ0PXsxfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L1N0eWxlZE9sPlxuICApO1xufVxuXG5mdW5jdGlvbiBMaW5rKHByb3BzKSB7XG4gIGNvbnN0IHVybCA9IHByb3BzLnVybDtcbiAgY29uc3QgdGl0bGUgPSBwcm9wcy50aXRsZSB8fCB1cmw7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQSBocmVmPXt1cmx9IHRpdGxlPXt0aXRsZX0gey4uLnByb3BzLmF0dHJpYnV0ZXN9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvU3R5bGVkQT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gSW1hZ2UocHJvcHMpIHtcbiAgY29uc3QgeyB1cmwsIHRpdGxlLCBhbHQgfSA9IHByb3BzLmVsZW1lbnQuZGF0YTtcbiAgY29uc3QgaXNTZWxlY3RlZCA9IHVzZVNlbGVjdGVkKCk7XG4gIHJldHVybiAoXG4gICAgPHNwYW4gey4uLnByb3BzLmF0dHJpYnV0ZXN9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPGltZ1xuICAgICAgICBzcmM9e3VybH1cbiAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICBhbHQ9e2FsdH1cbiAgICAgICAgey4uLnByb3BzLmF0dHJpYnV0ZXN9XG4gICAgICAgIGNzcz17XG4gICAgICAgICAgaXNTZWxlY3RlZCAmJlxuICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICAgIGBcbiAgICAgICAgfVxuICAgICAgLz5cbiAgICA8L3NwYW4+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMZWFmKHsgYXR0cmlidXRlcywgY2hpbGRyZW4sIGxlYWYgfSkge1xuICBpZiAobGVhZi5ib2xkKSB7XG4gICAgY2hpbGRyZW4gPSA8Qm9sZD57Y2hpbGRyZW59PC9Cb2xkPjtcbiAgfVxuXG4gIGlmIChsZWFmLml0YWxpYykge1xuICAgIGNoaWxkcmVuID0gPEl0YWxpYz57Y2hpbGRyZW59PC9JdGFsaWM+O1xuICB9XG5cbiAgaWYgKGxlYWYuZGVsZXRlKSB7XG4gICAgY2hpbGRyZW4gPSA8U3RyaWtldGhyb3VnaD57Y2hpbGRyZW59PC9TdHJpa2V0aHJvdWdoPjtcbiAgfVxuXG4gIGlmIChsZWFmLmNvZGUpIHtcbiAgICBjaGlsZHJlbiA9IDxDb2RlPntjaGlsZHJlbn08L0NvZGU+O1xuICB9XG5cbiAgLy8gaWYgKGxlYWYuYnJlYWspIHtcbiAgLy8gICBjaGlsZHJlbiA9IDxCcmVhayAvPjtcbiAgLy8gfVxuXG4gIHJldHVybiA8c3BhbiB7Li4uYXR0cmlidXRlc30+e2NoaWxkcmVufTwvc3Bhbj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJJbmxpbmVfX0RFUFJFQ0FURUQoKSB7XG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5ub2RlLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICByZXR1cm4gPExpbmsgey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgICAgcmV0dXJuIDxJbWFnZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSAnYnJlYWsnOlxuICAgICAgICByZXR1cm4gPEJyZWFrIHsuLi5wcm9wc30gLz47XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWxlbWVudChwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuLCBlbGVtZW50LCBjbGFzc05hbWVXcmFwcGVyLCBjb2RlQmxvY2tDb21wb25lbnQgfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZSA9IHsgdGV4dEFsaWduOiBlbGVtZW50LmFsaWduIH07XG5cbiAgc3dpdGNoIChlbGVtZW50LnR5cGUpIHtcbiAgICBjYXNlICdidWxsZXRlZC1saXN0JzpcbiAgICAgIHJldHVybiA8QnVsbGV0ZWRMaXN0PntjaGlsZHJlbn08L0J1bGxldGVkTGlzdD47XG4gICAgY2FzZSAncXVvdGUnOlxuICAgICAgcmV0dXJuIDxRdW90ZT57Y2hpbGRyZW59PC9RdW90ZT47XG4gICAgY2FzZSAnaGVhZGluZy1vbmUnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nT25lPntjaGlsZHJlbn08L0hlYWRpbmdPbmU+O1xuICAgIGNhc2UgJ2hlYWRpbmctdHdvJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ1R3bz57Y2hpbGRyZW59PC9IZWFkaW5nVHdvPjtcbiAgICBjYXNlICdoZWFkaW5nLXRocmVlJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ1RocmVlPntjaGlsZHJlbn08L0hlYWRpbmdUaHJlZT47XG4gICAgY2FzZSAnaGVhZGluZy1mb3VyJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ0ZvdXI+e2NoaWxkcmVufTwvSGVhZGluZ0ZvdXI+O1xuICAgIGNhc2UgJ2hlYWRpbmctZml2ZSc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdGaXZlPntjaGlsZHJlbn08L0hlYWRpbmdGaXZlPjtcbiAgICBjYXNlICdoZWFkaW5nLXNpeCc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdTaXg+e2NoaWxkcmVufTwvSGVhZGluZ1NpeD47XG4gICAgY2FzZSAnbGlzdC1pdGVtJzpcbiAgICAgIHJldHVybiA8TGlzdEl0ZW0+e2NoaWxkcmVufTwvTGlzdEl0ZW0+O1xuICAgIGNhc2UgJ251bWJlcmVkLWxpc3QnOlxuICAgICAgcmV0dXJuIDxOdW1iZXJlZExpc3Q+e2NoaWxkcmVufTwvTnVtYmVyZWRMaXN0PjtcbiAgICBjYXNlICd0YWJsZSc6XG4gICAgICByZXR1cm4gPFRhYmxlIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUtcm93JzpcbiAgICAgIHJldHVybiA8VGFibGVSb3cgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICd0YWJsZS1jZWxsJzpcbiAgICAgIHJldHVybiA8VGFibGVDZWxsIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGhlbWF0aWMtYnJlYWsnOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxUaGVtYXRpY0JyZWFrIHsuLi5wcm9wc30gLz5cbiAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICApO1xuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgcmV0dXJuIDxJbWFnZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgIHJldHVybiA8QnJlYWsgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdzaG9ydGNvZGUnOlxuICAgICAgaWYgKGVsZW1lbnQuaWQgPT09ICdjb2RlLWJsb2NrJyAmJiBjb2RlQmxvY2tDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Vm9pZEJsb2NrIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8U2hvcnRjb2RlIGNsYXNzTmFtZVdyYXBwZXI9e2NsYXNzTmFtZVdyYXBwZXJ9IHR5cGVPdmVybG9hZD1cImNvZGUtYmxvY2tcIiB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Vm9pZEJsb2NrIHsuLi5wcm9wc30+XG4gICAgICAgICAgPFNob3J0Y29kZSB7Li4ucHJvcHN9PntjaGlsZHJlbn08L1Nob3J0Y29kZT5cbiAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPFBhcmFncmFwaCBzdHlsZT17c3R5bGV9PntjaGlsZHJlbn08L1BhcmFncmFwaD47XG4gIH1cbn1cbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledA = (0, _styledBase.default)("a", {
  target: "evlbpgx10",
  label: "StyledA"
})(process.env.NODE_ENV === "production" ? {
  name: "r1lz23",
  styles: "text-decoration:underline;font-size:inherit;"
} : {
  name: "r1lz23",
  styles: "text-decoration:underline;font-size:inherit;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledHr = (0, _styledBase.default)("hr", {
  target: "evlbpgx11",
  label: "StyledHr"
})(process.env.NODE_ENV === "production" ? {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;"
} : {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTable = (0, _styledBase.default)("table", {
  target: "evlbpgx12",
  label: "StyledTable"
})(process.env.NODE_ENV === "production" ? {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;"
} : {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTd = (0, _styledBase.default)("td", {
  target: "evlbpgx13",
  label: "StyledTd"
})(process.env.NODE_ENV === "production" ? {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;"
} : {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

/**
 * Slate uses React components to render each type of node that it receives.
 * This is the closest thing Slate has to a schema definition. The types are set
 * by us when we manually deserialize from Remark's MDAST to Slate's AST.
 */

/**
 * Mark Components
 */
function Bold(props) {
  return (0, _core.jsx)("strong", null, props.children);
}
function Italic(props) {
  return (0, _core.jsx)("em", null, props.children);
}
function Strikethrough(props) {
  return (0, _core.jsx)("s", null, props.children);
}
function Code(props) {
  return (0, _core.jsx)(StyledCode, null, props.children);
}

/**
 * Node Components
 */
function Paragraph(props) {
  return (0, _core.jsx)(StyledP, props.attributes, props.children);
}
function ListItem(props) {
  return (0, _core.jsx)(StyledLi, props.attributes, props.children);
}
function Quote(props) {
  return (0, _core.jsx)(StyledBlockQuote, props.attributes, props.children);
}
function HeadingOne(props) {
  return (0, _core.jsx)(StyledH1, props.attributes, props.children);
}
function HeadingTwo(props) {
  return (0, _core.jsx)(StyledH2, props.attributes, props.children);
}
function HeadingThree(props) {
  return (0, _core.jsx)(StyledH3, props.attributes, props.children);
}
function HeadingFour(props) {
  return (0, _core.jsx)(StyledH4, props.attributes, props.children);
}
function HeadingFive(props) {
  return (0, _core.jsx)(StyledH5, props.attributes, props.children);
}
function HeadingSix(props) {
  return (0, _core.jsx)(StyledH6, props.attributes, props.children);
}
function Table(props) {
  return (0, _core.jsx)(StyledTable, null, (0, _core.jsx)("tbody", props.attributes, props.children));
}
function TableRow(props) {
  return (0, _core.jsx)("tr", props.attributes, props.children);
}
function TableCell(props) {
  return (0, _core.jsx)(StyledTd, props.attributes, props.children);
}
function ThematicBreak(props) {
  const isSelected = (0, _slateReact.useSelected)();
  return (0, _core.jsx)("div", props.attributes, props.children, (0, _core.jsx)("div", {
    contentEditable: false
  }, (0, _core.jsx)(StyledHr, _extends({}, props.attributes, {
    css: isSelected && /*#__PURE__*/(0, _core.css)("box-shadow:0 0 0 2px ", _decapCmsUiDefault.colors.active, ";border-radius:8px;color:", _decapCmsUiDefault.colors.active, ";;label:ThematicBreak;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }))));
}
function Break(props) {
  return (0, _core.jsx)("br", props.attributes);
}
function BulletedList(props) {
  return (0, _core.jsx)(StyledUl, props.attributes, props.children);
}
function NumberedList(props) {
  return (0, _core.jsx)(StyledOl, _extends({}, props.attributes, {
    start: 1
  }), props.children);
}
function Link(props) {
  const url = props.url;
  const title = props.title || url;
  return (0, _core.jsx)(StyledA, _extends({
    href: url,
    title: title
  }, props.attributes), props.children);
}
function Image(props) {
  const {
    url,
    title,
    alt
  } = props.element.data;
  const isSelected = (0, _slateReact.useSelected)();
  return (0, _core.jsx)("span", props.attributes, props.children, (0, _core.jsx)("img", _extends({
    src: url,
    title: title,
    alt: alt
  }, props.attributes, {
    css: isSelected && /*#__PURE__*/(0, _core.css)("box-shadow:0 0 0 2px ", _decapCmsUiDefault.colors.active, ";;label:Image;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  })));
}
function Leaf({
  attributes,
  children,
  leaf
}) {
  if (leaf.bold) {
    children = (0, _core.jsx)(Bold, null, children);
  }
  if (leaf.italic) {
    children = (0, _core.jsx)(Italic, null, children);
  }
  if (leaf.delete) {
    children = (0, _core.jsx)(Strikethrough, null, children);
  }
  if (leaf.code) {
    children = (0, _core.jsx)(Code, null, children);
  }

  // if (leaf.break) {
  //   children = <Break />;
  // }

  return (0, _core.jsx)("span", attributes, children);
}
function renderInline__DEPRECATED() {
  return props => {
    switch (props.node.type) {
      case 'link':
        return (0, _core.jsx)(Link, props);
      case 'image':
        return (0, _core.jsx)(Image, props);
      case 'break':
        return (0, _core.jsx)(Break, props);
    }
  };
}
function Element(props) {
  const {
    children,
    element,
    classNameWrapper,
    codeBlockComponent
  } = props;
  const style = {
    textAlign: element.align
  };
  switch (element.type) {
    case 'bulleted-list':
      return (0, _core.jsx)(BulletedList, null, children);
    case 'quote':
      return (0, _core.jsx)(Quote, null, children);
    case 'heading-one':
      return (0, _core.jsx)(HeadingOne, null, children);
    case 'heading-two':
      return (0, _core.jsx)(HeadingTwo, null, children);
    case 'heading-three':
      return (0, _core.jsx)(HeadingThree, null, children);
    case 'heading-four':
      return (0, _core.jsx)(HeadingFour, null, children);
    case 'heading-five':
      return (0, _core.jsx)(HeadingFive, null, children);
    case 'heading-six':
      return (0, _core.jsx)(HeadingSix, null, children);
    case 'list-item':
      return (0, _core.jsx)(ListItem, null, children);
    case 'numbered-list':
      return (0, _core.jsx)(NumberedList, null, children);
    case 'table':
      return (0, _core.jsx)(Table, props);
    case 'table-row':
      return (0, _core.jsx)(TableRow, props);
    case 'table-cell':
      return (0, _core.jsx)(TableCell, props);
    case 'thematic-break':
      return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(ThematicBreak, props));
    case 'link':
      return (0, _core.jsx)(Link, props);
    case 'image':
      return (0, _core.jsx)(Image, props);
    case 'break':
      return (0, _core.jsx)(Break, props);
    case 'shortcode':
      if (element.id === 'code-block' && codeBlockComponent) {
        return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, _extends({
          classNameWrapper: classNameWrapper,
          typeOverload: "code-block"
        }, props)));
      }
      return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, props, children));
    default:
      return (0, _core.jsx)(Paragraph, {
        style: style
      }, children);
  }
}