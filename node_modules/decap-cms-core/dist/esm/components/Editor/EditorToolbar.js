"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EditorToolbar = void 0;
var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));
var _core = require("@emotion/core");
var _reactPolyglot = require("react-polyglot");
var _reactRouterDom = require("react-router-dom");
var _decapCmsUiDefault = require("decap-cms-ui-default");
var _publishModes = require("../../constants/publishModes");
var _UI = require("../UI");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
const styles = {
  noOverflow: process.env.NODE_ENV === "production" ? {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;"
  } : {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;"
  } : {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCbUIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IHN0YXR1cyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IHsgU2V0dGluZ3NEcm9wZG93biB9IGZyb20gJy4uL1VJJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsRGFya307XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c0NoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VEYW5nZXJ9O1xuYDtcblxuY29uc3QgVG9vbGJhckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9O1xuICBkaXNwbGF5OiBibG9jaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbiAgJltkaXNhYmxlZF0ge1xuICAgICR7YnV0dG9ucy5kaXNhYmxlZH07XG4gIH1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFB1Ymxpc2hEcm9wRG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgbWluLXdpZHRoOiBpbml0aWFsO1xuYDtcblxuY29uc3QgU3RhdHVzRHJvcGRvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIH1cbmA7XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3JCYWNrTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICB0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KSxcbiAgICAgICAgICBdXG4gICAgICAgIDogIWlzTmV3RW50cnkgJiZcbiAgICAgICAgICB0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pLFxuICAgICAgKCFzaG93RGVsZXRlIHx8IHVzZU9wZW5BdXRob3JpbmcpICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50U3RhdHVzLCBpc05ld0VudHJ5LCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgdCxcbiAgICAgIGVkaXRvckJhY2tMaW5rLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25CYWNrTGluayB0bz17ZWRpdG9yQmFja0xpbmt9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93Q29udHJvbHMoKSA6IHRoaXMucmVuZGVyU2ltcGxlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXI/LmF2YXRhcl91cmx9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection: /*#__PURE__*/(0, _core.css)("height:100%;display:flex;align-items:center;border:0 solid ", _decapCmsUiDefault.colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton: /*#__PURE__*/(0, _core.css)("background-color:", _decapCmsUiDefault.colorsRaw.tealLight, ";color:", _decapCmsUiDefault.colorsRaw.tealDark, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const TooltipText = (0, _styledBase.default)("div", {
  target: "e1d2l9mo0",
  label: "TooltipText"
})(process.env.NODE_ENV === "production" ? {
  name: "198q1ye",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s;"
} : {
  name: "198q1ye",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Tooltip = (0, _styledBase.default)("div", {
  target: "e1d2l9mo1",
  label: "Tooltip"
})("position:relative;display:inline-block;&:hover + ", TooltipText, "{visibility:visible;opacity:0.9;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TooltipContainer = (0, _styledBase.default)("div", {
  target: "e1d2l9mo2",
  label: "TooltipContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "79elbk",
  styles: "position:relative;"
} : {
  name: "79elbk",
  styles: "position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const DropdownButton = ( /*#__PURE__*/0, _styledBase.default)(_decapCmsUiDefault.StyledDropdownButton, {
  target: "e1d2l9mo3",
  label: "DropdownButton"
})(styles.noOverflow, " @media (max-width:1200px){padding-left:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "e1d2l9mo4",
  label: "ToolbarContainer"
})("box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:", _decapCmsUiDefault.zIndex.zIndex300, ";background-color:#fff;height:66px;display:flex;justify-content:space-between;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMain = (0, _styledBase.default)("div", {
  target: "e1d2l9mo5",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = (0, _styledBase.default)("div", {
  target: "e1d2l9mo6",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "70qvj9",
  styles: "display:flex;align-items:center;"
} : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = ( /*#__PURE__*/0, _styledBase.default)(ToolbarSubSectionFirst, {
  target: "e1d2l9mo7",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1a9getn",
  styles: "justify-content:flex-end;"
} : {
  name: "1a9getn",
  styles: "justify-content:flex-end;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.Link, {
  target: "e1d2l9mo8",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = (0, _styledBase.default)("div", {
  target: "e1d2l9mo9",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = ( /*#__PURE__*/0, _styledBase.default)(_decapCmsUiDefault.Dropdown, {
  target: "e1d2l9mo10",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = (0, _styledBase.default)("div", {
  target: "e1d2l9mo11",
  label: "BackArrow"
})("color:", _decapCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = (0, _styledBase.default)("div", {
  target: "e1d2l9mo12",
  label: "BackCollection"
})("color:", _decapCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = (0, _styledBase.default)("div", {
  target: "e1d2l9mo13",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "19ug521",
  styles: "margin-top:6px;"
} : {
  name: "19ug521",
  styles: "margin-top:6px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "e1d2l9mo14",
  label: "BackStatusUnchanged"
})(_decapCmsUiDefault.components.textBadgeSuccess, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThKOEMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IHN0YXR1cyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IHsgU2V0dGluZ3NEcm9wZG93biB9IGZyb20gJy4uL1VJJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsRGFya307XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c0NoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VEYW5nZXJ9O1xuYDtcblxuY29uc3QgVG9vbGJhckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9O1xuICBkaXNwbGF5OiBibG9jaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbiAgJltkaXNhYmxlZF0ge1xuICAgICR7YnV0dG9ucy5kaXNhYmxlZH07XG4gIH1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFB1Ymxpc2hEcm9wRG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgbWluLXdpZHRoOiBpbml0aWFsO1xuYDtcblxuY29uc3QgU3RhdHVzRHJvcGRvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIH1cbmA7XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3JCYWNrTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICB0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KSxcbiAgICAgICAgICBdXG4gICAgICAgIDogIWlzTmV3RW50cnkgJiZcbiAgICAgICAgICB0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pLFxuICAgICAgKCFzaG93RGVsZXRlIHx8IHVzZU9wZW5BdXRob3JpbmcpICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50U3RhdHVzLCBpc05ld0VudHJ5LCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgdCxcbiAgICAgIGVkaXRvckJhY2tMaW5rLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25CYWNrTGluayB0bz17ZWRpdG9yQmFja0xpbmt9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93Q29udHJvbHMoKSA6IHRoaXMucmVuZGVyU2ltcGxlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXI/LmF2YXRhcl91cmx9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */"));
const BackStatusChanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "e1d2l9mo15",
  label: "BackStatusChanged"
})(_decapCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = (0, _styledBase.default)("button", {
  target: "e1d2l9mo16",
  label: "ToolbarButton"
})(_decapCmsUiDefault.buttons.button, ";", _decapCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";", styles.noOverflow, ";display:block;@media (max-width:1200px){padding:0 10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNLbUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IHN0YXR1cyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IHsgU2V0dGluZ3NEcm9wZG93biB9IGZyb20gJy4uL1VJJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsRGFya307XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c0NoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VEYW5nZXJ9O1xuYDtcblxuY29uc3QgVG9vbGJhckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9O1xuICBkaXNwbGF5OiBibG9jaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbiAgJltkaXNhYmxlZF0ge1xuICAgICR7YnV0dG9ucy5kaXNhYmxlZH07XG4gIH1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFB1Ymxpc2hEcm9wRG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgbWluLXdpZHRoOiBpbml0aWFsO1xuYDtcblxuY29uc3QgU3RhdHVzRHJvcGRvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIH1cbmA7XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3JCYWNrTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICB0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KSxcbiAgICAgICAgICBdXG4gICAgICAgIDogIWlzTmV3RW50cnkgJiZcbiAgICAgICAgICB0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pLFxuICAgICAgKCFzaG93RGVsZXRlIHx8IHVzZU9wZW5BdXRob3JpbmcpICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50U3RhdHVzLCBpc05ld0VudHJ5LCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgdCxcbiAgICAgIGVkaXRvckJhY2tMaW5rLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25CYWNrTGluayB0bz17ZWRpdG9yQmFja0xpbmt9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93Q29udHJvbHMoKSA6IHRoaXMucmVuZGVyU2ltcGxlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXI/LmF2YXRhcl91cmx9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */"));
const DeleteButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "e1d2l9mo17",
  label: "DeleteButton"
})(_decapCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtMMEMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IHN0YXR1cyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IHsgU2V0dGluZ3NEcm9wZG93biB9IGZyb20gJy4uL1VJJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsRGFya307XG4gIGAsXG59O1xuXG5jb25zdCBUb29sdGlwVGV4dCA9IHN0eWxlZC5kaXZgXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgd2lkdGg6IDMyMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogNXB4O1xuXG4gIC8qIFBvc2l0aW9uIHRoZSB0b29sdGlwIHRleHQgKi9cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAxO1xuICB0b3A6IDE0NSU7XG4gIGxlZnQ6IDUwJTtcbiAgbWFyZ2luLWxlZnQ6IC0zMjBweDtcblxuICAvKiBGYWRlIGluIHRvb2x0aXAgKi9cbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuYDtcblxuY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAmOmhvdmVyICsgJHtUb29sdGlwVGV4dH0ge1xuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG5gO1xuXG5jb25zdCBUb29sdGlwQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgRHJvcGRvd25CdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5ub092ZXJmbG93fVxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjA1KSwgMCAxcHggM3B4IDAgcmdiYSg2OCwgNzQsIDg3LCAwLjEpLFxuICAgIDAgMnB4IDU0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDMwMH07XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c0NoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VEYW5nZXJ9O1xuYDtcblxuY29uc3QgVG9vbGJhckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9O1xuICBkaXNwbGF5OiBibG9jaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbiAgJltkaXNhYmxlZF0ge1xuICAgICR7YnV0dG9ucy5kaXNhYmxlZH07XG4gIH1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFB1Ymxpc2hEcm9wRG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgbWluLXdpZHRoOiBpbml0aWFsO1xuYDtcblxuY29uc3QgU3RhdHVzRHJvcGRvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9ycy5pbmZvVGV4dH07XG4gIH1cbmA7XG5cbmV4cG9ydCBjbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3JCYWNrTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICB0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KSxcbiAgICAgICAgICBdXG4gICAgICAgIDogIWlzTmV3RW50cnkgJiZcbiAgICAgICAgICB0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCwgY2FuRGVsZXRlIH0pLFxuICAgICAgKCFzaG93RGVsZXRlIHx8IHVzZU9wZW5BdXRob3JpbmcpICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50U3RhdHVzLCBpc05ld0VudHJ5LCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgdCxcbiAgICAgIGVkaXRvckJhY2tMaW5rLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25CYWNrTGluayB0bz17ZWRpdG9yQmFja0xpbmt9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93Q29udHJvbHMoKSA6IHRoaXMucmVuZGVyU2ltcGxlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dEZXBsb3lQcmV2aWV3Q29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlRGVwbG95UHJldmlld0NvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXI/LmF2YXRhcl91cmx9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */"));
const SaveButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "e1d2l9mo18",
  label: "SaveButton"
})(_decapCmsUiDefault.buttons.lightBlue, ";&[disabled]{", _decapCmsUiDefault.buttons.disabled, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "e1d2l9mo19",
  label: "PublishedToolbarButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishedButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "e1d2l9mo20",
  label: "PublishedButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "e1d2l9mo21",
  label: "PublishButton"
})("background-color:", _decapCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "e1d2l9mo22",
  label: "StatusButton"
})("background-color:", _decapCmsUiDefault.colorsRaw.tealLight, ";color:", _decapCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = (0, _styledBase.default)("div", {
  target: "e1d2l9mo23",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _decapCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colorsRaw.blue, ";}", _decapCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = (0, _styledBase.default)("button", {
  target: "e1d2l9mo24",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _decapCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "e1d2l9mo27",
  label: "PreviewLink"
});
const PublishDropDownItem = ( /*#__PURE__*/0, _styledBase.default)(_decapCmsUiDefault.DropdownItem, {
  target: "e1d2l9mo25",
  label: "PublishDropDownItem"
})(process.env.NODE_ENV === "production" ? {
  name: "12k1a1h",
  styles: "min-width:initial;"
} : {
  name: "12k1a1h",
  styles: "min-width:initial;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StatusDropdownItem = ( /*#__PURE__*/0, _styledBase.default)(_decapCmsUiDefault.DropdownItem, {
  target: "e1d2l9mo26",
  label: "StatusDropdownItem"
})(_decapCmsUiDefault.Icon, "{color:", _decapCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class EditorToolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "renderSimpleControls", () => {
      const {
        collection,
        hasChanged,
        isNewEntry,
        showDelete,
        onDelete,
        t
      } = this.props;
      const canCreate = collection.get('create');
      return (0, _core.jsx)(_react.default.Fragment, null, !isNewEntry && !hasChanged ? this.renderExistingEntrySimplePublishControls({
        canCreate
      }) : this.renderNewEntrySimplePublishControls({
        canCreate
      }), (0, _core.jsx)("div", null, showDelete ? (0, _core.jsx)(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null));
    });
    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = {},
        loadDeployPreview,
        t
      } = this.props;
      const {
        url,
        status,
        isFetching
      } = deployPreview;
      if (!status) {
        return;
      }
      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return (0, _core.jsx)(PreviewButtonContainer, null, deployPreviewReady ? (0, _core.jsx)(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, (0, _core.jsx)("span", null, label), (0, _core.jsx)(_decapCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : (0, _core.jsx)(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, (0, _core.jsx)("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), (0, _core.jsx)(_decapCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });
    _defineProperty(this, "renderStatusInfoTooltip", () => {
      const {
        t,
        currentStatus
      } = this.props;
      const statusToLocaleKey = {
        [_publishModes.status.get('DRAFT')]: 'statusInfoTooltipDraft',
        [_publishModes.status.get('PENDING_REVIEW')]: 'statusInfoTooltipInReview'
      };
      const statusKey = Object.keys(statusToLocaleKey).find(key => key === currentStatus);
      return (0, _core.jsx)(TooltipContainer, null, (0, _core.jsx)(Tooltip, null, (0, _core.jsx)(_decapCmsUiDefault.Icon, {
        type: "info-circle",
        size: "small",
        className: "tooltip"
      })), statusKey && (0, _core.jsx)(TooltipText, null, t(`editor.editorToolbar.${statusToLocaleKey[statusKey]}`)));
    });
    _defineProperty(this, "renderWorkflowStatusControls", () => {
      const {
        isUpdatingStatus,
        onChangeStatus,
        currentStatus,
        t,
        useOpenAuthoring
      } = this.props;
      const statusToTranslation = {
        [_publishModes.status.get('DRAFT')]: t('editor.editorToolbar.draft'),
        [_publishModes.status.get('PENDING_REVIEW')]: t('editor.editorToolbar.inReview'),
        [_publishModes.status.get('PENDING_PUBLISH')]: t('editor.editorToolbar.ready')
      };
      const buttonText = isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.status', {
        status: statusToTranslation[currentStatus]
      });
      return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "120px",
        renderButton: () => (0, _core.jsx)(StatusButton, null, buttonText)
      }, (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.draft'),
        onClick: () => onChangeStatus('DRAFT'),
        icon: currentStatus === _publishModes.status.get('DRAFT') ? 'check' : null
      }), (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.inReview'),
        onClick: () => onChangeStatus('PENDING_REVIEW'),
        icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') ? 'check' : null
      }), useOpenAuthoring ? '' : (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.ready'),
        onClick: () => onChangeStatus('PENDING_PUBLISH'),
        icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') ? 'check' : null
      })), useOpenAuthoring && this.renderStatusInfoTooltip());
    });
    _defineProperty(this, "renderNewEntryWorkflowPublishControls", ({
      canCreate,
      canPublish
    }) => {
      const {
        isPublishing,
        onPublish,
        onPublishAndNew,
        onPublishAndDuplicate,
        t
      } = this.props;
      return canPublish ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "200px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPublish
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPublishAndNew
      }), (0, _core.jsx)(PublishDropDownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPublishAndDuplicate
      })) : null) : '';
    });
    _defineProperty(this, "renderExistingEntryWorkflowPublishControls", ({
      canCreate,
      canPublish,
      canDelete
    }) => {
      const {
        unPublish,
        onDuplicate,
        isPersisting,
        t
      } = this.props;
      return canPublish || canCreate ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        key: "td-publish-create",
        renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
      }, canDelete && canPublish && (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.unpublish'),
        icon: "arrow",
        iconDirection: "right",
        onClick: unPublish
      }), canCreate && (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : '';
    });
    _defineProperty(this, "renderExistingEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onDuplicate,
        t
      } = this.props;
      return canCreate ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
      }, (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : (0, _core.jsx)(PublishedButton, null, t('editor.editorToolbar.published'));
    });
    _defineProperty(this, "renderNewEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onPersist,
        onPersistAndNew,
        onPersistAndDuplicate,
        isPersisting,
        t
      } = this.props;
      return (0, _core.jsx)("div", null, (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }), (0, _core.jsx)(_decapCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPersistAndDuplicate
      })) : null));
    });
    _defineProperty(this, "renderSimpleDeployPreviewControls", () => {
      const {
        hasChanged,
        isNewEntry,
        t
      } = this.props;
      if (!isNewEntry && !hasChanged) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
      }
    });
    _defineProperty(this, "renderWorkflowControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        useOpenAuthoring,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        currentStatus,
        collection,
        t
      } = this.props;
      const canCreate = collection.get('create');
      const canPublish = collection.get('publish') && !useOpenAuthoring;
      const canDelete = collection.get('delete', true);
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [(0, _core.jsx)(SaveButton, {
        disabled: !hasChanged,
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), currentStatus ? [this.renderWorkflowStatusControls(), this.renderNewEntryWorkflowPublishControls({
        canCreate,
        canPublish
      })] : !isNewEntry && this.renderExistingEntryWorkflowPublishControls({
        canCreate,
        canPublish,
        canDelete
      }), (!showDelete || useOpenAuthoring) && !hasUnpublishedChanges && !isModification ? null : (0, _core.jsx)(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });
    _defineProperty(this, "renderWorkflowDeployPreviewControls", () => {
      const {
        currentStatus,
        isNewEntry,
        t
      } = this.props;
      if (currentStatus) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel'));
      }

      /**
       * Publish control for published workflow entry.
       */
      if (!isNewEntry) {
        return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
      }
    });
  }
  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t,
      editorBackLink
    } = this.props;
    return (0, _core.jsx)(ToolbarContainer, null, (0, _core.jsx)(ToolbarSectionBackLink, {
      to: editorBackLink
    }, (0, _core.jsx)(BackArrow, null, "\u2190"), (0, _core.jsx)("div", null, (0, _core.jsx)(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? (0, _core.jsx)(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : (0, _core.jsx)(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), (0, _core.jsx)(ToolbarSectionMain, null, (0, _core.jsx)(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowControls() : this.renderSimpleControls()), (0, _core.jsx)(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowDeployPreviewControls() : this.renderSimpleDeployPreviewControls())), (0, _core.jsx)(ToolbarSectionMeta, null, (0, _core.jsx)(_UI.SettingsDropdown, {
      displayUrl: displayUrl,
      imageUrl: user === null || user === void 0 ? void 0 : user.avatar_url,
      onLogoutClick: onLogoutClick
    })));
  }
}
exports.EditorToolbar = EditorToolbar;
_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  onPersistAndDuplicate: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  onPublishAndDuplicate: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _propTypes.default.object,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  editorBackLink: _propTypes.default.string.isRequired
});
var _default = (0, _reactPolyglot.translate)()(EditorToolbar);
exports.default = _default;